
===========================
How to Use 0-add_integer.py
===========================

This module defines integer addition function ``add_integer(a, b=98)``

Usage
=====

``add_integer(...)``` returns the addition of its two arguments. For numbers,
that value is equivalent to using the ``+`` operator.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(2, 4)
    6

::

    >>> add_integer(2, -3)
    -1

The function can also work with floating values.

::

    >>> add_integer(2.0, 4.0)
    6

Note that floats are casted to ints before addition is performed.

::

    >>> add_integer(3.9, 0.2)
    3

::

    >>> add_integer(-2.8, -0.1)
    -2

Floating and non floating values can be combined

::

    >>> add_integer(2.3, -3)
    -1

Second argument is optional, by default it's 98

::

    >>> add_integer(2)
    100

Non-Numbers
===========

``add_integer()`` expects that both arguments are either integers or floats.
If either argument is a non-integer and non-float, a TypeError is raised:

::

    >>> add_integer("hello", 3)
    Traceback (most recent call last):
    TypeError: a should be an integer

::

    >>> add_integer(2, "hello")
    Traceback (most recent call last):
    TypeError: b should be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a should be an integer

::

    >>> add_integer(2.3, None)
    Traceback (most recent call last):
    TypeError: b should be an integer

If both arguments are non-integers and non-floats, a TypeError message is only
printed for the first argument.

::

    >>> add_integer("hello", "world")
    Traceback (most recent call last):
    TypeError: a should be an int

The function is gonna fail if inf is given

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: can't convert float inf to integer
     

::

    >>> add_integer(3, float('inf'))
    Traceback (most recent call last):
    OverflowError: can't convert float inf to integer

	with NaNs

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: can't convert float NaN to integer
